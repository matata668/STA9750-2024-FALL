[
  {
    "objectID": "mp04.html",
    "href": "mp04.html",
    "title": "Mini-Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans",
    "section": "",
    "text": "We are exploring the financial decision-making process for new faculty at CUNY, who must choose between two retirement plans: the Teacher’s Retirement System (TRS) and the Optional Retirement plan (ORP). This decision is critical and irreversible. Thus, a critical evaluation is essential.\nUsing data-driven methodologies, this report aims to provide insight into the factors influencing the optimal choice for different individuals and scenarios.\nThe analysis relies on the historical data and re sampling to simulate potential outcomes for each retirement plan. Key components of the report includes:"
  },
  {
    "objectID": "mp04.html#task-1-task-2",
    "href": "mp04.html#task-1-task-2",
    "title": "Mini-Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans",
    "section": "Task 1 & Task 2",
    "text": "Task 1 & Task 2\nWe have registered for AlphaVantage API key, securely stored it, and configured my R environment to interact with the API. By leveraging the AlphaVantage API, I aim to retrieve data such as time series stock information, exchange rates, and other financial metrics to support my project’s objectives, ensuring best practices for security and data handling throughout the process."
  },
  {
    "objectID": "mp04.html#task-2",
    "href": "mp04.html#task-2",
    "title": "Mini-Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans",
    "section": "Task 2",
    "text": "Task 2\nSimilar to Task 1, we have now registered for the FRED API key, securely stored it, and configured my R environment to interact with the API.\nwe have fetched observations for a chosen data series (e.g., GDP) and organized it into a structured data frame. We are focusing on extracting accurate date-wise values, ensuring the value column is numeric for analysis, and validating the data’s time range through realtime_start and realtime_end."
  },
  {
    "objectID": "mp04.html#task-3-data-acquisition",
    "href": "mp04.html#task-3-data-acquisition",
    "title": "Mini-Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans",
    "section": "Task 3: Data Acquisition",
    "text": "Task 3: Data Acquisition\nAs our first step we begin by reading the Alpha Vantage and FRED API keys from local files. The current working directory is then dynamically retrieved, and a dedicated data directory is prepared to store output files. The script checks for the existence of this directory and creates it if necessary, establishing a consistent and organized location for saving data retrieved through API calls.\n\n\nCode\n# Load required libraries\nlibrary(httr2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(tibble)\nlibrary(knitr)\n\n# Get the current working directory\ncurrent_path &lt;- getwd()\n\n# Define the 'data' directory path\ndata_directory &lt;- file.path(current_path, \"data\")\n\n# Check if the directory exists, and create it if it doesn't\nif (!dir.exists(data_directory)) {\n  dir.create(data_directory)\n}\n\nalpha_vantage_api_key &lt;- readLines(file.path(current_path, \"Alpha_Vantage_API_key\"))\nfred_api_key &lt;- readLines(file.path(current_path, \"FRED_API_key\"))"
  },
  {
    "objectID": "mp04.html#function-to-call-api",
    "href": "mp04.html#function-to-call-api",
    "title": "Mini-Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans",
    "section": "Function to call API",
    "text": "Function to call API\nWe are now calling API to download the historical data for each data inputs mentioned below to begin with our Monte Carlo analysis\n\n\nCode\n#| Code-fold: true\n#| Code-summary: \"show the code\"\n\n# Define functions to fetch data from APIs\n\n# FRED API Function\nfetch_fred_data &lt;- function(series_id, api_key) {\n  response &lt;- request(\"https://api.stlouisfed.org/fred/series/observations\") %&gt;%\n    req_url_query(\n      series_id = series_id,\n      api_key = api_key,\n      file_type = \"json\",\n      observation_start = \"2008-12-31\",\n      observation_end = \"2024-11-30\"\n    ) %&gt;%\n    req_perform() %&gt;%\n    resp_body_json()\n  \n  data &lt;- response$observations %&gt;%\n    purrr::map_df(~ data.frame(date = .x$date, value = as.numeric(.x$value))) %&gt;%\n    dplyr::mutate(date = as.Date(date))\n  \n  return(data)\n}\n\n# AlphaVantage API Function\nfetch_alpha_data &lt;- function(function_type, symbol, api_key) {\n  response &lt;- request(\"https://www.alphavantage.co/query\") %&gt;%\n    req_url_query(\n      'function' = function_type,\n      symbol = symbol,\n      apikey = api_key\n    ) %&gt;%\n    req_perform() %&gt;%\n    resp_body_json()\n  \n  data &lt;- response$`Monthly Adjusted Time Series` %&gt;%\n    tibble::enframe(name = \"date\", value = \"values\") %&gt;%\n    dplyr::mutate(\n      date = as.Date(date),\n      value = as.numeric(purrr::map_chr(values, \"5. adjusted close\"))\n    )\n  \n  return(data)\n}\n\n\n\nAverage Hourly Earning\n\n\nCode\nwage_growth &lt;- fetch_fred_data(\"CES0500000003\", fred_api_key)\nkable(head(wage_growth, 5))\n\n\n\n\n\ndate\nvalue\n\n\n\n\n2008-12-01\n21.94\n\n\n2009-01-01\n21.96\n\n\n2009-02-01\n21.99\n\n\n2009-03-01\n22.06\n\n\n2009-04-01\n22.09\n\n\n\n\n\n\n\nInflation\n\n\nCode\ninflation &lt;- fetch_fred_data(\"CPIAUCSL\", fred_api_key)\nkable(head(inflation,5))\n\n\n\n\n\ndate\nvalue\n\n\n\n\n2008-12-01\n211.398\n\n\n2009-01-01\n211.933\n\n\n2009-02-01\n212.705\n\n\n2009-03-01\n212.495\n\n\n2009-04-01\n212.709\n\n\n\n\n\n\n\nUS Equity Market total returns\n\n\nCode\nus_equity &lt;- fetch_alpha_data(\"TIME_SERIES_MONTHLY_ADJUSTED\",\"SPY\", alpha_vantage_api_key)\nkable(head(us_equity,5))\n\n\n\n\n\n\n\n\n\n\ndate\nvalues\nvalue\n\n\n\n\n2024-12-04\n602.9700 , 607.9100 , 602.3410 , 607.6600 , 607.6600 , 101440179, 0.0000\n607.6600\n\n\n2024-11-29\n571.3200 , 603.3500 , 567.8900 , 602.5500 , 602.5500 , 901761281, 0.0000\n602.5500\n\n\n2024-10-31\n573.4000 , 586.1200 , 565.2700 , 568.6400 , 568.6400 , 976134821, 0.0000\n568.6400\n\n\n2024-09-30\n560.4700 , 574.7100 , 539.4400 , 573.7600 , 573.7600 , 1044167074, 1.7455\n573.7600\n\n\n2024-08-30\n552.5700 , 564.2000 , 510.2700 , 563.6800 , 561.9538 , 1244598926, 0.0000\n561.9538\n\n\n\n\n\n\n\nInternational Equity Market Returns (Nasdaq Global Select via AlphaVantage)\n\n\nCode\nintl_equity &lt;- fetch_alpha_data(\"TIME_SERIES_MONTHLY_ADJUSTED\", \"QQQ\", alpha_vantage_api_key) # Nasdaq ETF\nkable(head(intl_equity,5))\n\n\n\n\n\n\n\n\n\n\ndate\nvalues\nvalue\n\n\n\n\n2024-12-04\n511.0100, 523.5200, 510.6200, 523.2600, 523.2600, 69831287, 0.0000\n523.2600\n\n\n2024-11-29\n485.5000 , 515.5800 , 484.2545 , 509.7400 , 509.7400 , 567729700, 0.0000\n509.7400\n\n\n2024-10-31\n487.7000 , 501.3500 , 477.4000 , 483.8500 , 483.8500 , 660234819, 0.0000\n483.8500\n\n\n2024-09-30\n473.2000 , 493.7000 , 448.1900 , 488.0700 , 488.0700 , 694549166, 0.6769\n488.0700\n\n\n2024-08-30\n471.7600 , 485.5400 , 423.4500 , 476.2700 , 475.6036 , 908585535, 0.0000\n475.6036\n\n\n\n\n\n\n\nBond Market Returns (10-Year Treasury Yields from FRED)\n\n\nCode\nbond_market &lt;- fetch_fred_data(\"DGS10\", fred_api_key) # 10-Year Treasury Constant Maturity\nkable(head(bond_market,5))\n\n\n\n\n\ndate\nvalue\n\n\n\n\n2008-12-31\n2.25\n\n\n2009-01-01\nNA\n\n\n2009-01-02\n2.46\n\n\n2009-01-05\n2.49\n\n\n2009-01-06\n2.51\n\n\n\n\n\n\n\nShort-term Debt Returns (3-Month T-Bills from FRED)\n\n\nCode\nshort_term_debt &lt;- fetch_fred_data(\"TB3MS\", fred_api_key) \nkable(head(short_term_debt,5))\n\n\n\n\n\ndate\nvalue\n\n\n\n\n2008-12-01\n0.03\n\n\n2009-01-01\n0.13\n\n\n2009-02-01\n0.30\n\n\n2009-03-01\n0.21\n\n\n2009-04-01\n0.16\n\n\n\n\n\n\n\nAlign Data to Monthly Frequency and Combined in single dataframe\n\n\nCode\n# Align Data to Monthly Frequency\nalign_to_monthly &lt;- function(data) {\n  data %&gt;%\n    dplyr::mutate(month = floor_date(date, \"month\")) %&gt;%\n    dplyr::group_by(month) %&gt;%\n    dplyr::summarize(value = mean(value, na.rm = TRUE)) %&gt;%\n    dplyr::ungroup() %&gt;%\n    dplyr::rename(date = month)\n}\n\nwage_growth &lt;- align_to_monthly(wage_growth)\ninflation &lt;- align_to_monthly(inflation)\nbond_market &lt;- align_to_monthly(bond_market)\nshort_term_debt &lt;- align_to_monthly(short_term_debt)\nus_equity_align &lt;- align_to_monthly(us_equity)\nintl_equity_align &lt;- align_to_monthly(intl_equity)\n\n# Combine All Data into a Single Data Frame\ncombined_data &lt;- wage_growth %&gt;%\n  dplyr::rename(wage_growth = value) %&gt;%\n  dplyr::left_join(inflation %&gt;% dplyr::rename(inflation = value), by = \"date\") %&gt;%\n  dplyr::left_join(us_equity_align %&gt;% dplyr::rename(us_equity = value), by = \"date\") %&gt;%\n  dplyr::left_join(intl_equity_align %&gt;% dplyr::rename(intl_equity = value), by = \"date\") %&gt;%\n  dplyr::left_join(bond_market %&gt;% dplyr::rename(bond_market = value), by = \"date\") %&gt;%\n  dplyr::left_join(short_term_debt %&gt;% dplyr::rename(short_term_debt = value), by = \"date\")\n\nfile_path &lt;- file.path(data_directory, \"monte_carlo_inputs.csv\")\nwrite.csv(combined_data, file_path, row.names = FALSE)\n\nkable(head(combined_data))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndate\nwage_growth\ninflation\nus_equity\nintl_equity\nbond_market\nshort_term_debt\n\n\n\n\n2008-12-01\n21.94\n211.398\n67.1092\n25.9052\n2.250000\n0.03\n\n\n2009-01-01\n21.96\n211.933\n61.5986\n25.3129\n2.517500\n0.13\n\n\n2009-02-01\n21.99\n212.705\n54.9799\n23.9802\n2.870000\n0.30\n\n\n2009-03-01\n22.06\n212.495\n59.5698\n26.4547\n2.819545\n0.21\n\n\n2009-04-01\n22.09\n212.709\n65.4879\n29.9099\n2.927143\n0.16\n\n\n2009-05-01\n22.11\n213.022\n69.3159\n30.8696\n3.293000\n0.18"
  },
  {
    "objectID": "mp04.html#task-4",
    "href": "mp04.html#task-4",
    "title": "Mini-Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans",
    "section": "Task 4",
    "text": "Task 4\nUtilizing the downloaded data for our various inputs,we are now going to analyze and identify their key properties.\n\n\nCode\nfile_path &lt;- file.path(data_directory, \"monte_carlo_inputs.csv\")\ncd &lt;- read.csv(file_path, header = TRUE)\ntibble_data &lt;- as_tibble(cd)\n\n# Convert a character column to Date format\ncombined_data &lt;- tibble_data %&gt;%\n  mutate(date = as.Date(date, format = \"%Y-%m-%d\"))\n\n## Compute summary statistics and reshape into tidy format\nhistorical_stats &lt;- combined_data %&gt;%\n  summarise(\n    avg_wage_growth = mean(wage_growth, na.rm = TRUE),\n    var_wage_growth = var(wage_growth, na.rm = TRUE),\n    high_wage_growth = max(wage_growth, na.rm = TRUE),\n    low_wage_growth = min(wage_growth, na.rm = TRUE),\n    \n    avg_inflation = mean(inflation, na.rm = TRUE),\n    var_inflation = var(inflation, na.rm = TRUE),\n    high_inflation = max(inflation, na.rm = TRUE),\n    low_inflation = min(inflation, na.rm = TRUE),\n    \n    avg_us_equity = mean(us_equity, na.rm = TRUE),\n    var_us_equity = var(us_equity, na.rm = TRUE),\n    high_us_equity = max(us_equity, na.rm = TRUE),\n    low_us_equity = min(us_equity, na.rm = TRUE),\n    \n    avg_intl_equity = mean(intl_equity, na.rm = TRUE),\n    var_intl_equity = var(intl_equity, na.rm = TRUE),\n    high_intl_equity = max(intl_equity, na.rm = TRUE),\n    low_intl_equity = min(intl_equity, na.rm = TRUE),\n    \n    avg_bond_market = mean(bond_market, na.rm = TRUE),\n    var_bond_market = var(bond_market, na.rm = TRUE),\n    high_bond_market = max(bond_market, na.rm = TRUE),\n    low_bond_market = min(bond_market, na.rm = TRUE),\n    \n    avg_short_term_debt = mean(short_term_debt, na.rm = TRUE),\n    var_short_term_debt = var(short_term_debt, na.rm = TRUE),\n    high_short_term_debt = max(short_term_debt, na.rm = TRUE),\n    low_short_term_debt = min(short_term_debt, na.rm = TRUE)\n  ) %&gt;%\n  pivot_longer(\n    everything(),\n    names_to = c(\"metric\", \"statistic\"),\n    names_sep = \"_\",\n    values_to = \"value\"\n  ) %&gt;%\n  pivot_wider(\n    names_from = statistic,\n    values_from = value\n  )\n\n\nfile_path &lt;- file.path(data_directory, \"historical_stats.csv\")\nwrite.csv(historical_stats, file_path, row.names = FALSE)\n\n# Display the summary table\nkable(historical_stats)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmetric\nwage\ninflation\nus\nintl\nbond\nshort\n\n\n\n\navg\n26.93052\n250.7623\n234.5213\n166.5194\n2.5273295\n1.103298\n\n\nvar\n15.24336\n818.5613\n17730.4843\n15923.7464\n0.8214516\n2.778011\n\n\nhigh\n35.46000\n315.4540\n573.7600\n488.0700\n4.7980952\n5.340000\n\n\nlow\n21.94000\n211.3980\n54.9799\n23.9802\n0.6236364\n0.010000\n\n\n\n\n\n\n\nCode\n# Calculate correlation matrix to measure correlation among the variables\ncorrelation_matrix &lt;- combined_data %&gt;%\n  select(wage_growth, inflation, us_equity, intl_equity, bond_market, short_term_debt) %&gt;%\n  cor(use = \"complete.obs\")\n\n# Print the correlation matrix\nkable(correlation_matrix)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwage_growth\ninflation\nus_equity\nintl_equity\nbond_market\nshort_term_debt\n\n\n\n\nwage_growth\n1.0000000\n0.9891112\n0.9838384\n0.9736390\n0.2180231\n0.7775356\n\n\ninflation\n0.9891112\n1.0000000\n0.9678133\n0.9528990\n0.3044813\n0.8218272\n\n\nus_equity\n0.9838384\n0.9678133\n1.0000000\n0.9928337\n0.1820846\n0.7211033\n\n\nintl_equity\n0.9736390\n0.9528990\n0.9928337\n1.0000000\n0.1774704\n0.7000740\n\n\nbond_market\n0.2180231\n0.3044813\n0.1820846\n0.1774704\n1.0000000\n0.6478846\n\n\nshort_term_debt\n0.7775356\n0.8218272\n0.7211033\n0.7000740\n0.6478846\n1.0000000\n\n\n\n\n\nCode\nlibrary(gt)\n\n# Convert correlation matrix to a data frame\ncorrelation_df &lt;- as.data.frame(correlation_matrix)\n\nlibrary(DT)\n\n# Convert correlation matrix to a data frame\ncorrelation_df &lt;- as.data.frame(correlation_matrix)\n\n# Render interactive table\ndatatable(correlation_df, caption = \"Correlation Matrix\")\n\n\n\n\n\n\n\nHeat map\nusing the heat map visualization the correlation matrix, shows the strength and direction of relationships between variables. Dark red indicates strong positive correlations (close to 1), such as between intl_equity and us_equity or wage_growth and inflation, suggesting these variables move closely together. Lighter red areas, like the correlations involving bond_market, indicate weaker relationships, meaning these variables are less interdependent. The diagonal values represent perfect self-correlation (value of 1). This heatmap highlights key patterns and relationships, providing a foundation for deeper analysis.\n\n\nCode\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(reshape2)\n\n# Convert correlation matrix to a long format for ggplot2\ncorrelation_long &lt;- melt(correlation_matrix)\n\n# Plot the heatmap\nheatmap_plot &lt;- ggplot(data = correlation_long, aes(x = Var1, y = Var2, fill = value)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0,\n                       limit = c(-1, 1), name = \"Correlation\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +\n  labs(title = \"Correlation Heatmap\",\n       x = \"Variables\",\n       y = \"Variables\")\n\nheatmap_path &lt;- file.path(data_directory, \"correlation_heatmap.png\")\nggsave(heatmap_path, plot = heatmap_plot, width = 8, height = 6)\n\nprint(heatmap_plot)\n\n\n\n\n\n\n\n\n\n\n\nTime-series graph\nThe time-series graph provides insights into how these economic factors change over time, showing their trends, growth patterns, and volatility. The most notable observation is the sharp upward trend in us_equity and intl_equity, particularly after 2015, reflecting significant growth in equity markets. In contrast, inflation shows a steady and gradual increase, indicating long-term stability. Meanwhile, bond_market, short_term_debt, and wage_growth remain relatively flat, signifying minimal variation over time. The graph also highlights volatility in equities, likely tied to economic cycles or market events.\n\n\nCode\nlibrary(ggplot2)\n# Plot the time series for each factor to visualize trends\nlong_run_plot &lt;- combined_data %&gt;%\n  tidyr::gather(key = \"factor\", value = \"value\", -date) %&gt;%\n  ggplot(aes(x = date, y = value, color = factor)) +\n  geom_line() +\n  theme_minimal() +\n  labs(\n    title = \"Time Series of Key Economic Factors\",\n    x = \"Date\",\n    y = \"Value\",\n    color = \"Factor\"\n  )\n\n# Display the plot\nprint(long_run_plot)\n\n\n\n\n\n\n\n\n\nThe time-series graph displays the trends and changes over time for each variable, highlighting patterns like growth, stability, or volatility in individual factors. It provides a temporal perspective, allowing us to see how variables evolve and fluctuate across different periods. In contrast, the heatmap visualizes the relationships between variables, showing the strength and direction of their correlations in a static snapshot. Together, these visualizations offer complementary insights: the time-series graph reveals dynamic trends, while the heat map emphasizes inter-variable connections."
  }
]